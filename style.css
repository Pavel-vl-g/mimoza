/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure, fieldset):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  ul,
  ol,
  dl
):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
/* :where(ul[class]) {
  list-style: none;
} */

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;

  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}


/**
  Упрощаем работу с изображениями и видео
 */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Убираем скачок интерфейса по горизонтали
    при появлении / исчезновении скроллбара
   */
  scrollbar-gutter: stable;
}

/**
  Плавный скролл
 */
html {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
 */
a:where([class]) {
  display: inline-flex;
}

/**
  Курсор-рука при наведении на элемент
 */
button,
label {
  cursor: pointer;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут fill со значением 'none' или начинается с 'url')
 */
:where([fill]:not(
  [fill="none"],
  [fill^="url"]
)) {
  fill: currentColor;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут stroke со значением 'none')
 */
:where([stroke]:not(
  [stroke="none"],
  [stroke^="url"]
)) {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Приведение рамок таблиц в классический 'collapse' вид
 */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

@font-face {
    font-family: 'Roboto';
    src: url("./fonts/Roboto-Regular.woff2") format('woff2');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}
body {
    font-family: 'Roboto';
}

.box {
  /* width: 600px; */
  background-color: rgb(249, 175, 1);
  /* background-image: url('./photos/logo.jpg'); */
  /* background-repeat: repeat; */
  /* background-repeat: space; заполняет все пространство, заполняя промежутки цветом фона между изображениями */
  /* background-repeat: round; заполняет все пространство, не заполняя промежутки между изображениями */
  background-repeat: no-repeat;
  /* background-position: center; */
  /* background-attachment: fixed; */
}

.header {
  max-width:none
  /* text-align: center; */
  position: sticky;
  top: 0px;
  background-color:brown;
  height: 100px;
}

.flex-container {
  display: flex;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-element {
   /* flex-shrink: 0; */
  /* flex-grow: 1; */
  /* обобщенное свойство flex: 0 1 auto, где 0 flex-grow, 1 flex-shrink, flex-basis auto */
  /* flex: 0 0 50%; */
  flex-grow: 1;
  margin: 5px;
}

.justify-content-center {
  justify-content: center;
}

.justify-self {
  justify-self: center;
}

.align-items-flex-start {
  align-items: center;
}

.gap {
  column-gap: 5px 5px;
}

.logo {
  /* max-width: 50vw; */
  /* max-height: 600px; */
  max-width: 800px;
  border: 5px solid black;
  /* outline: 2px solid green; */
  /* border-radius: 24% 76% 30% 70% / 64% 38% 62% 36%; */
  /* margin: 5px; */
  /* position: relative; */
  /* top: 50px; для position: relative; */
  /* left: 200px; для position: relative; */
}

.red-marker::marker {
  color: red;
}

.blue-marker::marker {
  color: blue;
}

.green-marker::marker {
  color: green;
}

.white-marker::marker {
  color: white;
}

.rebeccapurple-marker::marker {
  color: rebeccapurple;
}

.content::marker {
  content: "-:)";
}

li:nth-child(even) {
  color: green;
}